* Avy

  #+BEGIN_SRC emacs-lisp
    (use-package avy
      :ensure t)
  #+END_SRC

* AucTEX

  #+BEGIN_SRC emacs-lisp
    (use-package tex
      :config
      (add-to-list 'TeX-view-program-list '("mupdf" "/usr/bin/mupdf %o"))  
      (setcdr (assq 'output-pdf TeX-view-program-selection) '("mupdf"))
      :chords
      ("34" . TeX-insert-dollar))
  #+END_SRC

* File Backups

  #+BEGIN_SRC emacs-lisp
    (setq backup-directory-alist
          '(("." . "~/.local/share/emacs/saves/")))
  #+END_SRC
  
* Column Number Mode

  #+BEGIN_SRC emacs-lisp
    (column-number-mode)
  #+END_SRC

* Company

  #+BEGIN_SRC emacs-lisp
    (use-package company
      :ensure t
      :config
      (setq company-idle-delay 0)
      (setq company-backends '(company-dabbrev))
      (global-company-mode))
  #+END_SRC
  
** Front End

   #+BEGIN_SRC emacs-lisp
     ;;(use-package company-box
     ;;  :hook
     ;;  (company-mode . company-box-mode))
   #+END_SRC

** Keybinds

   Manually select a item from the drop-down with C-n / C-p and insert the
   current selection with tab. Abort with C-g.
   
   #+BEGIN_SRC emacs-lisp
     (setq company-active-map '(keymap . ()))
     (define-key company-active-map (kbd "C-n") 'company-select-next)
     (define-key company-active-map (kbd "C-p") 'company-select-previous)
     (define-key company-active-map (kbd "<tab>") 'company-complete-selection)
     (define-key company-active-map (kbd "TAB") 'company-complete-selection)
     (define-key company-active-map (kbd "C-g") 'company-abort)
   #+END_SRC
   
* Dired
** Hide Details Mode

   #+BEGIN_SRC emacs-lisp
     (use-package dired
       :config
       (setq dired-auto-revert-buffer t
             dired-dwim-target t)
       (add-hook 'dired-mode-hook 'dired-hide-details-mode))
   #+END_SRC

* Expand Region

  #+BEGIN_SRC emacs-lisp
    (use-package expand-region
      :ensure t
      :bind
      ("C-=" . er/expand-region))
  #+END_SRC

* Flyspell

  #+BEGIN_SRC emacs-lisp
    (use-package flyspell
      :hook
      (text-mode-hook . flyspell-mode))
  #+END_SRC

* Info

  Add a directory for info documentation on personally selected topics.

  #+BEGIN_SRC emacs-lisp
    (setq Info-additional-directory-list '("/home/tassos/Info/"))
  #+END_SRC

* Ivy

  #+BEGIN_SRC emacs-lisp
    (use-package ivy
      :config (ivy-mode 1))
  #+END_SRC

* Magit

  #+BEGIN_SRC emacs-lisp
    (use-package magit
      :ensure t
      :bind
      ("\C-x g" . magit-status))
  #+END_SRC

* Multiple Cursors

  #+BEGIN_SRC emacs-lisp
    (use-package multiple-cursors
      :ensure t
      :bind
      ("C-S-c C-S-c" . mc/edit-lines)
      ("C->" . mc/mark-next-like-this)
      ("C-<" . mc/mark-previous-like-this)
      ("C-c C-<" . mc/mark-all-like-this))
  #+END_SRC

* Octave

  #+BEGIN_SRC emacs-lisp
    (use-package octave
      :config
      (add-to-list 'auto-mode-alist '("\\.m\\'" . octave-mode)))
  #+END_SRC

* Org
** Core

   #+BEGIN_SRC emacs-lisp
     (use-package org
       :ensure t
       :config
       (bind-key "C-c a" (lambda () "Open Org-Agenda in New Frame"
                           (interactive)
                           (select-frame (make-frame))
                           (org-agenda-list)
                           (delete-other-windows)))
       (setq org-agenda-files '("~/Org/school.org"
                                "~/Org/projects.org"))
       (setq org-adapt-indentation nil)
       (setq org-todo-keywords
             '((sequence "TODO" "|" "DONE" "KILL" "FAIL"))))
   #+END_SRC

** Org-Notify

   #+BEGIN_SRC emacs-lisp
     (use-package org-notify
       :config
       (org-notify-start)
       (setq org-notify-map nil)
       (org-notify-add 'homework
                       '(:time "6h" :actions -notify/window :duration 60))
       (org-notify-add 'important
                       '(:time "20m" :actions -notify/window :period "2m" :duration 60)))
   #+END_SRC

** Org-Journal

   #+BEGIN_SRC emacs-lisp
     (use-package org-journal
       :ensure t
       :config
       (setq org-journal-dir "~/Org/diary")
       :bind
       ("C-c j" . org-journal-new-entry))
   #+END_SRC

* Package

  #+BEGIN_SRC emacs-lisp
    (use-package package
      :config
      (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/")))
  #+END_SRC

* Projectile

  #+BEGIN_SRC emacs-lisp
    (use-package projectile
      :init
      (projectile-mode +1))
  #+END_SRC

* RunAssoc

  #+BEGIN_SRC emacs-lisp
    (use-package run-assoc
      :config
      (setq associated-program-alist
            '(("mupdf" "\\.pdf")
              ("mpv" "\\.mkv")
              ("mpv" "\\.mp4")
              ("waterfox-current" "\\.html"))))
  #+END_SRC

* Smart Tabs
** Configure Package

   #+BEGIN_SRC emacs-lisp
     (use-package smart-tabs-mode
       :config
       (setq-default indent-tabs-mode nil)
       (setq-default tab-width 4)
       (smart-tabs-insinuate 'c))
   #+END_SRC

** Indent after Yank

   #+BEGIN_SRC emacs-lisp
     (advice-add 'yank :after
                 (lambda (ARG)
                   "Indent the text just yanked."
                   (indent-region (region-beginning) (region-end))))

     (advice-add 'yank-pop :after
                 (lambda (ARG)
                   "Indent the text just popped from the kill ring."
                   (indent-region (region-beginning) (region-end))))
   #+END_SRC

* Visible Mark

  #+BEGIN_SRC emacs-lisp
    (use-package visible-mark
      :ensure t
      :config
      (setq visible-mark-max 3)
      (global-visible-mark-mode)
      :bind
      ("C--" . avy-pop-mark))
  #+END_SRC

* Which-Key

  #+BEGIN_SRC emacs-lisp
    (use-package which-key
      :init
      (which-key-mode))
  #+END_SRC

* WS-Butler

  #+BEGIN_SRC emacs-lisp
    (use-package ws-butler
      :hook
      (prog-mode-hook . ws-butler-mode))
  #+END_SRC

* YASnippet

  #+BEGIN_SRC emacs-lisp
    (use-package yasnippet
      :config (yas-global-mode 1))
  #+END_SRC

