* Movement
** Avy
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :ensure t)
#+END_SRC

** Scrolling
#+BEGIN_SRC emacs-lisp
  (setq scroll-conservatively 10000
        scroll-preserve-screen-position t)
#+END_SRC

* Programming
** Tools
*** Company
Auto completion using company.

#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :config
    (setq company-idle-delay 0)
    (setq company-minimum-prefix-length 1))
#+END_SRC
  
**** Front End

#+BEGIN_SRC emacs-lisp
  ;;(use-package company-box
  ;;  :hook
  ;;  (company-mode . company-box-mode))
#+END_SRC

**** Keybinds

Manually select a item from the drop-down with C-n / C-p and insert the
current selection with tab. Abort with C-g.
   
#+BEGIN_SRC emacs-lisp
  (setq company-active-map '(keymap . ()))
  (define-key company-active-map (kbd "C-n") 'company-select-next)
  (define-key company-active-map (kbd "C-p") 'company-select-previous)
  (define-key company-active-map (kbd "<tab>") 'company-complete-selection)
  (define-key company-active-map (kbd "TAB") 'company-complete-selection)
  (define-key company-active-map (kbd "C-g") 'company-abort)
#+END_SRC
   
*** Magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :bind
    ("\C-x g" . magit-status))
#+END_SRC

*** Projectile
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :init
    (projectile-mode +1)
    :bind-keymap
    ("C-c p" . projectile-command-map))
#+END_SRC

*** Smart Tabs
**** Configure Package
#+BEGIN_SRC emacs-lisp
  (use-package smart-tabs-mode
    :config
    (setq-default indent-tabs-mode nil)
    (setq-default tab-width 4)
    (smart-tabs-insinuate 'c))
#+END_SRC

**** Indent after Yank
#+BEGIN_SRC emacs-lisp
  (advice-add 'yank :after
              (lambda (ARG)
                "Indent the text just yanked."
                (indent-region (region-beginning) (region-end))))

  (advice-add 'yank-pop :after
              (lambda (ARG)
                "Indent the text just popped from the kill ring."
                (indent-region (region-beginning) (region-end))))
#+END_SRC

** Languages
*** CC-Mode Languages
**** C
Setup for C includes:
1. Configure and activate auto completion with company.
2. More to come...

#+BEGIN_SRC emacs-lisp
  (defun tassos/c-mode-setup ()
    "Setup emacs programming utilities for c-mode"
    (setq company-backends '((company-keywords
                              company-yasnippet
                              company-dabbrev-code)))
    (company-mode 1))
#+END_SRC

Call function in c-mode hook.

#+BEGIN_SRC emacs-lisp
  (add-hook 'c-mode-hook 'tassos/c-mode-setup)
#+END_SRC

*** Lisp
**** Emacs Lisp
Setup for emacs-lisp includes:
1. Configure and activate auto completion with company.
2. More to come...

#+BEGIN_SRC emacs-lisp
  (defun tassos/elisp-mode-setup ()
    "Setup emacs programming utilities for emacs-lisp-mode"
    (setq company-backends '((company-elisp
                             company-keywords
                             company-yasnippet
                             company-dabbrev-code)))
    (company-mode 1))
#+END_SRC

Run setup function when entering a Emacs lisp buffer.

#+BEGIN_SRC emacs-lisp
  (add-hook 'emacs-lisp-mode-hook 'tassos/elisp-mode-setup)
#+END_SRC

*** Haskell
*** Octave
#+BEGIN_SRC emacs-lisp
  (use-package octave
    :config
    (add-to-list 'auto-mode-alist '("\\.m\\'" . octave-mode)))
#+END_SRC

* Utility
** Beacon
#+BEGIN_SRC emacs-lisp
  (use-package beacon
    :ensure t
    :config
    (beacon-mode 1))
#+END_SRC

** Dired
*** Hide Details Mode
#+BEGIN_SRC emacs-lisp
  (use-package dired
    :config
    (setq dired-listing-switches "--group-directories-first -al")
    (setq dired-auto-revert-buffer t
          dired-dwim-target t)
    (add-hook 'dired-mode-hook 'dired-hide-details-mode))
#+END_SRC

** Expand Region
#+BEGIN_SRC emacs-lisp
  (use-package expand-region
    :ensure t
    :bind
    ("C-=" . er/expand-region))
#+END_SRC

** Info
Add a directory for info documentation on personally selected topics.

#+BEGIN_SRC emacs-lisp
  (setq Info-additional-directory-list '("/home/tassos/Info/"))
#+END_SRC

** Ivy
#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :config (ivy-mode 1))
#+END_SRC

** Multiple Cursors
#+BEGIN_SRC emacs-lisp
  (use-package multiple-cursors
    :ensure t
    :bind
    ("C-S-c C-S-c" . mc/edit-lines)
    ("C->" . mc/mark-next-like-this)
    ("C-<" . mc/mark-previous-like-this)
    ("C-c C-<" . mc/mark-all-like-this))
#+END_SRC

** RunAssoc
#+BEGIN_SRC emacs-lisp
  (use-package run-assoc
    :config
    (global-set-key (kbd "C-x C-r") 'run-associated-program)
    (setq associated-program-alist
          '(("sxiv" "\\.png")
            ("mupdf" "\\.pdf")
            ("mpv" "\\.mkv")
            ("mpv" "\\.mp4")
            ("waterfox-current" "\\.html")
            ("libreoffice" "\\.docx"))))
#+END_SRC

** Tramp
#+BEGIN_SRC emacs-lisp
  (setq tramp-default-method "ssh")
#+END_SRC

** Visible Mark
#+BEGIN_SRC emacs-lisp
  (use-package visible-mark
    :ensure t
    :config
    (setq visible-mark-max 3)
    (global-visible-mark-mode)
    :bind
    ("C--" . avy-pop-mark))
#+END_SRC

** Which-Key
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :init
    (which-key-mode))
#+END_SRC

** WS-Butler
#+BEGIN_SRC emacs-lisp
  (use-package ws-butler
    :hook
    (prog-mode-hook . ws-butler-mode))
#+END_SRC

** YASnippet
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :config (yas-global-mode 1))
#+END_SRC

* Visual
** Mode-Line
#+BEGIN_SRC emacs-lisp
  (use-package telephone-line
    :ensure t
    :config
    (telephone-line-mode 1))
#+END_SRC

* Writing
** Flyspell
#+BEGIN_SRC emacs-lisp
  (use-package flyspell
    :config
    (add-hook 'text-mode-hook 'flyspell-mode))
#+END_SRC

*** Languages
**** TEX
***** AucTEX
#+BEGIN_SRC emacs-lisp
  (use-package tex
    :config
    (add-to-list 'TeX-view-program-list '("mupdf" "/usr/bin/mupdf %o"))  
    (setcdr (assq 'output-pdf TeX-view-program-selection) '("mupdf"))
    :chords
    ("34" . TeX-insert-dollar))
#+END_SRC

**** Org
***** Core
#+BEGIN_SRC emacs-lisp
  (use-package org
    :ensure t
    :config
    (bind-key "C-c a" (lambda () "Open Org-Agenda in New Frame"
                        (interactive)
                        (select-frame (make-frame))
                        (org-agenda-list)
                        (delete-other-windows)))
    (bind-key "C-c t" (lambda () "Open Org-Todo in New Frame"
                        (interactive)
                        (select-frame (make-frame))
                        (org-todo-list)
                        (delete-other-windows)))
    (setq org-agenda-files '("~/Org/school.org"
                             "~/Org/projects.org"
                             "~/Org/personal.org"))
    (setq org-adapt-indentation nil)
    (setq org-todo-keywords
          '((sequence "TODO" "|" "DONE" "KILL" "FAIL"))))
#+END_SRC

***** Org-Notify
#+BEGIN_SRC emacs-lisp
  (use-package org-notify
    :config
    (org-notify-start)
    (setq org-notify-map nil)
    (org-notify-add 'homework
                    '(:time "6h" :actions -notify/window :duration 60))
    (org-notify-add 'important
                    '(:time "20m" :actions -notify/window :period "2m" :duration 60)))
#+END_SRC

***** Org-Journal
#+BEGIN_SRC emacs-lisp
  (use-package org-journal
    :ensure t
    :config
    (setq org-journal-dir "~/Org/diary")
    :bind
    ("C-c j" . org-journal-new-entry))
#+END_SRC

* Unsorted
** File Backups
#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist
        '(("." . "~/.local/share/emacs/saves/")))
#+END_SRC
  
** Column Number Mode
#+BEGIN_SRC emacs-lisp
  (column-number-mode)
#+END_SRC





